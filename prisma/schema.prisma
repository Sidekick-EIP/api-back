generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

enum EventCalendar {
  MEAL
  SPORTS_EXERCISE
}

enum Goal {
  LOSE_WEIGHT
  STAY_IN_SHAPE
  GAIN_MUSCLE_MASS
  BUILD_MUSCLE
}

enum Page {
  NUTRITION
  MESSAGE
  HOME
  SETTINGS
  PROFILE
  SIGNUP
  LOGIN
}

enum MuscleGroup {
  SHOULDERS
  CHEST
  BACK
  BICEPS
  TRICEPS
  ABS
  LEGS
  GLUTES
  CALF
  CARDIO
  FULL_BODY
  OTHER
}

enum Level {
  BEGINNER
  IRREGULAR_TRAINING
  MEDIUM
  ADVANCED
}

enum Activities {
  RUNNING
  CYCLING
  SWIMMING
  WEIGHTLIFTING
  YOGA
  PILATES
  MARTIAL_ARTS
  DANCING
  HIKING
  ROCK_CLIMBING
  TENNIS
  BASKETBALL
  SOCCER
  VOLLEYBALL
  BASEBALL
  SKIING
  SNOWBOARDING
  SURFING
  GOLF
  ROWING
  CROSSFIT
  GYMNASTICS
  TRIATHLON
  RUGBY
  BOXING
  SKATING
  SQUASH
  BADMINTON
  HORSE_RIDING
  TABLE_TENNIS
}

enum Period {
  BREAKFAST
  LUNCH
  DINNER
  SNACKS
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  user         UserData?      @relation("user")
  steps        Steps[]
  messages     Message[]
  nutrition    Nutrition[]
  sidekick     UserData?      @relation("sidekick")
  Reports      Reports[]
  workouts     Workouts[]
  Preferences  Preferences[]
  BugsBeta     BugsBeta[]
  FeedBackUser FeedBackUser[]

  @@map("users")
}

model Steps {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  nbOfSteps Int

  @@map("steps")
}

model UserData {
  userId      String       @id @default(uuid())
  user        User         @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade)
  birth_date  DateTime     @default(now())
  firstname   String
  lastname    String
  size        Int
  weight      Int
  goal_weight Int
  avatar      String       @default("https://sidekick-files.s3.eu-west-3.amazonaws.com/default.jpg")
  gender      Gender
  description String
  level       Level
  activities  Activities[]
  goal        Goal?        @default(STAY_IN_SHAPE)
  sidekick_id String?      @unique
  sidekick    User?        @relation(name: "sidekick", fields: [sidekick_id], references: [id], onDelete: SetNull)
  isDarkMode  Boolean      @default(false)

  @@map("users_data")
}

model Nutrition {
  id          Int      @id @unique @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  picture     String?
  protein     Int
  carbs      Int
  fat         Int
  weight      Int
  calories    Int
  period      Period
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now())

  @@map("nutrition")
}

model Message {
  id String @id @default(uuid())

  from    User?  @relation(fields: [from_id], references: [id], onDelete: Cascade)
  from_id String

  to String

  content String

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  seen Boolean @default(false)

  @@map("messages")
}

model Reports {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  reporterEmail String

  reason String

  createdAt DateTime @default(now())

  @@map("reports")
}

model Workouts {
  id             Int               @id @unique @default(autoincrement())
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  exercise       Exercises_Library @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId     Int
  burnedCalories Int
  duration       Int
  date           DateTime          @default(now())
  createdAt      DateTime          @default(now())
  updateAt       DateTime          @default(now())

  @@map("workouts")
}

model Preferences {
  id     Int    @id @unique @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  darkMode      Boolean @default(false)
  notifications Boolean @default(true)
  sounds        Boolean @default(true)

  @@map("preferences")
}

model BugsBeta {
  id          Int    @id @unique @default(autoincrement())
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String
  page        Page

  @@map("bugs_beta")
}

model FeedBackUser {
  id      Int    @id @unique @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  rating  Float
  comment String

  @@map("feedback_user")
}

model BetaUser {
  id        Int    @id @unique @default(autoincrement())
  email     String @unique
  lastname  String
  firstname String

  @@map("beta_users")
}

model OpenFoodFacts {
  id                 Int    @id @unique @default(autoincrement())
  product_name       String
  brands             String
  energy_kcal_100g   Float
  proteins_100g      Float
  carbohydrates_100g Float
  fat_100g           Float
  image_front_url    String
  nutriscore         String

  @@map("open_food_facts")
}

model Exercises_Library {
  id           Int          @id @unique @default(autoincrement())
  workouts     Workouts[]
  name         String
  description  String
  thumbnail    String?
  video        String
  met          Int
  muscle_group MuscleGroup?

  @@map("exercises_library")
}
