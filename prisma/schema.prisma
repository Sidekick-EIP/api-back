generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

enum EventCalendar {
  MEAL
  SPORTS_EXERCISE
}

enum Goal {
  WEIGHT_GAIN
  WEIGHT_LOSS
  GETTING_BACK_IN_SHAPE
}

enum SportFrequence {
  NEVER
  LESS_THAN_ONCE_A_MONTH
  ONCE_A_MONTH
  ONCE_IN_TWO_WEEKS
  ONCE_A_WEEK
  TWICE_A_WEEK
  THREE_A_WEEK
  FOUR_A_WEEK
  FIVE_A_WEEK
  MORE_THEN_FIVE_A_WEEK
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  user      UserData?  @relation("user")
  calories  Calories[]
  steps     Steps[]
  messages  Message[]
  meals     Meals[]
  sidekick  UserData?  @relation("sidekick")
  Reports   Reports[]
  sports_exercices Sports_exercices[]
  planning Planning[]
  Preferences Preferences[]

  @@map("users")
}

model Calories {
  id         String @id @default(uuid())
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  nbCalories Int

  @@map("calories")
}

model Steps {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  nbOfSteps Int

  @@map("steps")
}

model UserData {
  userId          String         @id @default(uuid())
  user            User           @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade)
  birth_date      DateTime       @default(now())
  username        String         @unique
  firstname       String
  lastname        String
  size            Int
  weight          Int
  avatar          String         @default("https://sidekick-files.s3.eu-west-3.amazonaws.com/default.jpg")
  gender          Gender
  description     String
  sport_frequence SportFrequence
  sports          Json?           @default("{}")
  goal            Goal?
  sidekick_id     String?        @unique
  sidekick        User?          @relation(name: "sidekick", fields: [sidekick_id], references: [id], onDelete: SetNull)
  isDarkMode      Boolean        @default(false)

  @@map("users_data")
}

model Meals {
  id          Int      @id @unique @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  ingredients Json
  period      String   @default("dinner")
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now())

  @@map("meals")
}

model Message {
  id String @id @default(uuid())

  from    User?  @relation(fields: [from_id], references: [id], onDelete: Cascade)
  from_id String

  to String

  content String

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  seen Boolean @default(false)

  @@map("messages")
}

model Reports {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  reporterEmail String

  reason String

  createdAt DateTime @default(now())

  @@map("reports")
}

model Sports_exercices {
  id          Int     @id @unique @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now())

  @@map("sports_exercices")
}

model Planning {
  id               Int     @id @unique @default(autoincrement())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  day              DateTime
  content          Json
  type             EventCalendar
  createdAt        DateTime @default(now())
  updateAt         DateTime @default(now())

  @@map("planning")
}

model Preferences {
  id         Int     @id @unique @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  darkMode    Boolean @default(false)
  notifications Boolean @default(true)
  sounds Boolean @default(true)

  @@map("preferences")
}

model OpenFoodFacts {
  id          Int     @id @unique @default(autoincrement())
  product_name        String
  brands              String
  energy_kcal_100g         Float
  proteins_100g       Float
  carbohydrates_100g  Float
  fat_100g            Float
  image_front_url     String
  nutriscore          String
  @@map("open_food_facts")
}
